-- updating DATA

-- UPDATE table_name SET col1=newval1, … WHERE …

UPDATE “users” SET “mood” = ‘Low’ WHERE “happiness_level” < 33;

ALTER TABLE "posts" ADD COLUMN "category_id" INTEGER;

UPDATE "posts" SET "category_id" = (
SELECT "id" 
FROM "categories" 
WHERE "categories"."name" = "posts"."category"
);

ALTER TABLE "posts" DROP COLUMN "category";

-- What command would you use to add 1 to the rating of all movies in the movies table?

UPDATE movies SET rating = rating + 1;

-- All values of the last_name column are currently in upper-case. We'd like to change them from e.g. "SMITH" 
-- to "Smith". Using an UPDATE query and the right string function(s), make that happen.
-- Instead of dates of birth, the table has a column born_ago, a TEXT field of the form e.g. 
-- '34 years 5 months 3 days'. We'd like to convert this to an actual date of birth. In a first step, 
-- use the appropriate DDL command to add a date_of_birth column of the appropriate data type. Then, 
-- using an UPDATE query, set the date_of_birth column to the correct value based on the value of the
-- born_ago column. Finally, using another DDL command, remove the born_ago column from the table.

-- Update the last_name column to be capitalized
UPDATE "people" SET "last_name" =
  SUBSTR("last_name", 1, 1) || -- this is a join command 
  LOWER(SUBSTR("last_name", 2));

-- Change the born_ago column to date_of_birth
ALTER TABLE "people" ADD column "date_of_birth" DATE;

UPDATE "people" SET "date_of_birth" = 
  (CURRENT_TIMESTAMP - "born_ago"::INTERVAL)::DATE; -- INTERVAL retrieves the data in full timestamp value, but we only need date

ALTER TABLE "people" DROP COLUMN "born_ago";
